#include <iostream>
#include <cmath>

using namespace std;

const int MAX = 10;
const int INF = 1007;

int n, k;
char S[MAX][MAX];
int R[MAX][MAX][10];

int main() {
    cin >> n >> k;
    for (int i = 0; i < n; i++)
        cin >> S[i];

    for (int i = 0; i <= n; i++)
        for (int j = 0; j <= n; j++)
            for (int c = 0; c <= k; c++)
                R[i][j][c] = INF;
    int res = INF;

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {

            R[i][j][0] = 0;
            R[i][j][S[i][j] - '0'] = min(R[i][j][S[i][j] - '0'], 1); //якщо в початковій матриці 0, то він так і залишиться на 0 рівні. Якщо там 1, то ця 1 перенесеться на наступний рівень 1ий

            for (int c = 0; c <= k; c++) { //с = той рівень ерею на якому ми зараз знаходимось
                if (c == k)
                    res = min(res, R[i][j][c]);
                if (i + 1 < n)//якщо справа існує елемент
                    R[i + 1][j][min(k, c + S[i + 1][j] - '0')] = min(R[i + 1][j][min(k, c + S[i + 1][j] - '0')],
                                                                     R[i][j][c] + 1); // перевіряє клітинку i+1 на всіх рівнях 3д ерею. На кожному рівні бере цю клітинку і обирає мінімальне між правою і початковою збільшеною на 1. Фактично, 1 буде тільки тоді коли та що справа має один див поясн 1.1
                if (j + 1 < n)
                    R[i][j + 1][min(k, c + S[i][j + 1] - '0')] = min(R[i][j + 1][min(k, c + S[i][j + 1] - '0')],
                                                                     R[i][j][c] + 1);

            }
            for (int l = 0; l <= n; ++l) {
                for (int m = 0; m <= n; ++m) {
                    for (int i1 = 0; i1 <= k; ++i1) {
                        cout << R[i1][m][l] << ' ';
                    }
                    cout << '\n';
                }
                cout << "\n---------------------------------------------------------------------------\n";
            }
            cout << "\n********************************************************************************\n";
        }
    }

    if (res >= INF)
        res = -1;
    cout << res << endl;

    return 0;
}

/*
4 3
0101
0001
0100
0001
 */

